#!/usr/bin/env perl
use warnings;
no warnings 'qw';
use strict;

use Pod::Usage;
use Getopt::Long qw(:config no_ignore_case);
use Log::Log4perl qw(:easy :no_extra_logdie_message);

use Graph;

use Data::Dumper;
#$Data::Dumper::Sortkeys=1;

our $VERSION = '0.2.0';

=head1 NAME

cluster-ids

=head1 AUTHOR

Thomas Hackl - S<thackl@lim4.de>

=head1 DESCRIPTION

Cluster a list of id 1-to-1 relations.

=head1 SYNOPSIS

  cluster-ids [<OPTIONS>] IDSFILE [IDSFILE2 ...]
  cat IDSFILE | cluster-ids [<OPTIONS>]

=head1 OPTIONS

=over

=item -t|--template ["c%04d"]

Cluster id template in sprintf format.

=item -w|--wide [OFF]

Default output is a long table with one line per id: id  cluster  [size]. Use this
to toggle a wide format with all ids in one line, separated by spaces: cluster
[size]  id1 id2 id3 ...

=item -m|--min-size [1]

Exclude clusters smaller than this from output

=item -s|--sort [Clusters [Members]] [sr l]

Sort output - cluster members and between clusters. Possible values are "l",
"n", "s" (lexical, numerical, by size) and reverse versions "lr", "nr",
"sr". Member sorting is performed first. Size sorting obviously only works
between clusters, not members. For convenience "-s" only expands to "-s sr l"
(largest cluster first with members in lexical order), "-s n" and "-s l" to "-s
n n" and "-s l l". --no-sort deactivates sorting completely.

=item [-D|--debug]

Turn on debug messages.

=item [-q|--quiet]

Supress verbose information messages.

=item [-h|--help]

Show this help screen

=back

=head1 CODE

=cut

my %opt = init();
my $L = $opt{logger};

##------------------------------------------------------------------------##

my $G = Graph->new(
	directed => 1,
#	unionfind => 1,
);

$L->info("Constructing graph");

while(readline($opt{ifh})){
	chomp();
	my ($k, $v) = split(/\t/, $_);
        if (! defined $k) { # empty line
            next;
        }elsif ($k eq $v || ! defined $v) { # singleton
            $G->add_vertex($k);
        } else { # edge
            $G->add_edge($k, $v) unless $k eq $v;
        }
}

$L->debug("$G");

$L->info("Extracting clusters");

my @cc = $G->weakly_connected_components();

if (@{$opt{sort}}) {

    # sort members first
    if ($opt{sort}[1] eq 'l') {
        $L->debug("members sort:  l");
        @cc = map{[sort @$_]}@cc
    }elsif ($opt{sort}[1] eq 'lr') {
        $L->debug("members sort:  lr");
        @cc = map{[sort {$b cmp $a} @$_]}@cc
    }elsif ($opt{sort}[1] eq 'n') {
        $L->debug("members sort:  n");
        @cc = map{[sort{$a <=> $b}@$_]}@cc
    }elsif ($opt{sort}[1] eq 'nr') {
        $L->debug("members sort:  nr");
        @cc = map{[sort{$b <=> $a}@$_]}@cc
    }

    # sort clusters
    if ($opt{sort}[0] eq 's') {
        $L->debug("clusters sort: s");
        @cc = sort{@$a <=> @$b}@cc;
    }elsif ($opt{sort}[0] eq 'sr') {
        $L->debug("clusters sort: sr");
        @cc = sort{@$b <=> @$a}@cc;
    }elsif ($opt{sort}[0] eq 'l') {
        $L->debug("clusters sort: l");
        @cc = sort {$a->[0] cmp $b->[0]}@cc;
    }elsif ($opt{sort}[0] eq 'lr') {
        $L->debug("clusters sort: lr");
        @cc = sort {$b->[0] cmp $a->[0]}@cc;
    }elsif ($opt{sort}[0] eq 'n') {
        $L->debug("clusters sort: n");
        @cc = sort{$a->[0] <=> $b->[0]}@cc
    }elsif ($opt{sort}[0] eq 'nr') {
        $L->debug("clusters sort: nr");
        @cc = sort{$b->[0] <=> $a->[0]}@cc
    }
}

my $i = 0;
foreach (@cc){
    next if @$_ < $opt{min_size};
    $i++;
    my $size = @$_;
    if ($opt{wide}){
        printf "$opt{template}\t%d\t%s\n", $i, $size, join(" ", @$_);
    }else {
        printf "%s\t$opt{template}\t%d\n", $_, $i, $size  for @$_;
    }
}



=head2 init

=cut

sub init{
    no warnings 'qw';

    my (%p) = @_;

    # GetOptions
    my $argv = join(" ", @ARGV);

    # logger
    Log::Log4perl->init( \(q(
        log4perl.rootLogger                     = INFO, Screen
        log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
        log4perl.appender.Screen.stderr         = 1
        log4perl.appender.Screen.layout         = PatternLayout
        log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [cluster-ids] %m%n)));

    my %def = ();
    my %opt = (
        sort => [],
        min_size => 1,
        template => "c%04d",
    );
    my $L = $opt{logger} = Log::Log4perl->get_logger();

    GetOptions(
        \%opt, qw(
                     wide|w!
                     template|t=s
                     exclude_singletons|exclude-singletons|x!
                     sort|s:s{,2}
                     no_sort|no-sort!
                     version|V!
                     quiet|q!
                     debug|D!
                     help|h!
             )
    ) or $L->logdie('Failed to "GetOptions"');

    $opt{argv} = $argv; # store it just in case

    # help
    $opt{help} && pod2usage(1);

    # version
    if ($opt{version}) {
        print"$VERSION\n";
        exit 0;
    }

    $opt{in} = @ARGV ? shift @ARGV : '-';

    $L->logdie("unused argument: @ARGV") if @ARGV;

    %opt = (%def, %opt);

    # required stuff
    for (qw(in)) {
        if (ref $opt{$_} eq 'ARRAY') {
            pod2usage("required: --$_") unless @{$opt{$_}}
        } else {
            pod2usage("required: --$_") unless defined ($opt{$_})
        }
    }

    # debug level
    if ($opt{debug}){
        $L->level($DEBUG);
        $L->debug('Verbose level set to DEBUG');
    }
    $L->level($WARN) if $opt{quiet};

    if ($opt{in} ne '-') {
        open($opt{ifh}, '<', $opt{in}) or $L->logdie("$opt{in}: $!");
    } else {
        $L->info("reading STDIN");
        $opt{ifh} = \*STDIN;
    }

    if ($opt{no_sort}) {
        $opt{sort} = [];
    } elsif ( @{$opt{sort}} == 0 ) {
        $opt{sort} = ['sr', 'l']
    } elsif ( @{$opt{sort}} == 1 ) {
        if ($opt{sort}[0] eq '') {
            $opt{sort} = ['sr', 'l']
        } elsif ($opt{sort}[0] =~ /^s/) {
            $opt{sort} = [$opt{sort}[0], 'l']
        } else {
            $opt{sort} = [$opt{sort}[0], $opt{sort}[0]];
        }
    }

    if (@{$opt{sort}}) {
        my ($s1) = grep{$_ eq $opt{sort}[0]}qw(s sr l lr n nr);
        my ($s2) = grep{$_ eq $opt{sort}[1]}qw(l lr n nr);
        $L->logdie("Invalid sort specification: @{$opt{sort}}") unless $s1 && $s2;
    }

    $L->debug(Dumper(\%opt));

    return %opt;
}
